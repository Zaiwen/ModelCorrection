package gr.seab.r2rml.SimpleRelationshipMatch;


import com.hp.hpl.jena.ontology.DatatypeProperty;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFList;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.vocabulary.OWL;
import com.hp.hpl.jena.vocabulary.RDFS;
import info.debatty.java.stringsimilarity.Levenshtein;

import java.io.File;
import java.net.MalformedURLException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.*;

/**Try to find the mapping between a set of relationships between two entities, and
 * a couple of relationship types in the OBJECT LINKING TABLE*
 * @Author Zaiwen Feng
 * @created 18 Mar 2019
 * */
public class RelationshipMatcher {

    /**Get the mapping between the relationship type of  CDM and relationship type of Object link table*
     * @created 22 Mar 2019
     *@param ontRTList multiple relationship types between entity A & B in the CDM
     *@param dbRTList multiple relationship types in the object link table between table A & B
     *@return a map where the key: RTs in Ont, the value: RTs in relational table
     * */
    public static Map<String, String> getRTMappings (List<String> ontRTList, List<String> dbRTList) {
        info.debatty.java.stringsimilarity.MetricLCS lcs = new info.debatty.java.stringsimilarity.MetricLCS();//create string comparison tool
        Map<String, String> rtMappings = new HashMap<>();
        for (String rdfNode : ontRTList) {

            String ontRT = rdfNode.toString();//get an relationship type from the CDM
            Double minDistance = 1.0;
            String matchedRT = "";
            for (String dbRT : dbRTList) {

                Double currentDistance = lcs.distance(ontRT, dbRT);
                if (currentDistance < minDistance) {
                    minDistance = currentDistance;//update the minimum distance
                    matchedRT = dbRT;
                }
            }
            rtMappings.put(ontRT,matchedRT);
        }
        return rtMappings;
    }

    /**Parse enumerated datatype generated by Protege*
     * @param ontologyFile an ontology file to be parsed
     * @param dataProperty data property whose data types are enumerated
     * @return a list of enumerated data type with regard to a data property
     * @created 21 Mar 2019
     * @revised 26 Mar 2019
     * */
    public static List<String> extractEnumeratedDatatype (String ontologyFile, String dataProperty) {

        String ontPrefix = "http://www.semanticweb.org/fengz/ontologies/2019/2/CDM-ontology-20190314#";//it could be got from the ontology file. 2019.03.26
        OntModel cdm = null;
        try {
            //load the ontology
            cdm = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM);
            cdm.read(new File(ontologyFile).toURL().toString());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }

        //Get to the property and the datatype that is its range
        final DatatypeProperty datatypeProperty = cdm.createDatatypeProperty(ontPrefix.concat(dataProperty));
        final Resource dataType = datatypeProperty.getPropertyResourceValue(RDFS.range);

        //The datatype is related to a list of values by owl:oneOf.
        final RDFList enumeration = dataType.getPropertyResourceValue(OWL.oneOf).as(RDFList.class);
        //The RDFList can be converted to a Java List.
        List<RDFNode> list = enumeration.asJavaList();

        final List<String> ontRTList = new ArrayList<>();

        System.out.println(list);
        for (RDFNode rdfNode : list) {

            ontRTList.add(rdfNode.toString());
        }

        return ontRTList;

    }

    /**Extract the relationship types from the relationship type column of Object link table*
     * @created 22 Mar 2019
     *@param databaseName name of database
     *@param tableName name of table
     *@param columnName name of column (i.e. relationship type)
     * */
    public static List<String> extractRTFromOBJTable (String databaseName, String tableName, String columnName) {
        List<String> relationshipTypes = new ArrayList<>();

        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + databaseName, "root", "123456Whu");
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery("select DISTINCT " + columnName + " FROM " + tableName);
            while (rs.next()) {

                String string = rs.getString(1);
                relationshipTypes.add(string);
                System.out.println(string);
            }
            connection.close();

        }catch (Exception ex) {
            ex.printStackTrace();
        }

        return relationshipTypes;
    }



//    public static void main (String args[]) {
////        String ontFile = "/Users/fengz/Documents/Data_Multiple_Schema_Matching/Karma-data-set/RDF-Graph@14Mar19/CDM.owl";
////        String dataProperty = "http://www.semanticweb.org/fengz/ontologies/2019/2/CDM-ontology-20190314#C_D_RT";
////        List<RDFNode> list = extractEnumeratedDatatype(ontFile,dataProperty);
//        List<String> relationshipTypes = extractRTFromOBJTable("CaseManagementSystem" , "persons_cases", "relationship_type");
//        for (String string : relationshipTypes) {
//            System.out.println(string);
//        }
//    }




    public static void main (String args[]) {

        String owlFilePath = "/Users/fengz/Documents/Data_Multiple_Schema_Matching/Karma-data-set/RDF-Graph@14Mar19/CDM.owl";//added on 26 Mar 2019
        //get the multiple relationship types from Data Source
        List<String> dbRelationTypeList = RelationshipMatcher.extractRTFromOBJTable("CaseManagementSystem","persons_locations","relationship_type");

        //get the multiple relationship types from CDM ontology
        List<String> ontRelationTypeList = RelationshipMatcher.extractEnumeratedDatatype(owlFilePath, "P_L_RT");

        //get the mappings
        Map<String,String> relationshipMap = RelationshipMatcher.getRTMappings(ontRelationTypeList,dbRelationTypeList);
        Map<String,String> map = getRTMappings(ontRelationTypeList,dbRelationTypeList);
        System.out.println("Done!");

    }
}
